const { GoogleSpreadsheet } = require('google-spreadsheet')
const fs = require("fs")
require('dotenv').config()
   

// Initialize the sheet - doc ID is the long id in the sheets URL
const doc = new GoogleSpreadsheet(process.env.ID)


const translate = async (text,lenguages) => {
    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: process.env.CLIENT_EMAIL,
        private_key: process.env.PRIVATE_KEY,
    })

    await doc.loadInfo() // loads document properties and worksheets

    const sheet = doc.sheetsByTitle["Translate"] // or use doc.sheetsById[id] or doc.sheetsByTitle[title]

    await sheet.loadCells('A1:B2') // loads a range of cells

    const A2 = sheet.getCellByA1('A2') //  load our target cells

    const B2 = sheet.getCellByA1('B2')

    //Add original text in cell A2

    A2.value = text

    //Create formula in B2
    let formulaTranslate = `=GOOGLETRANSLATE(A2;"${lenguages[lenguages.length - 2]}";"${lenguages[lenguages.length - 1]}")`
    for (let i = lenguages.length - 2; i > 0; i--) {
        formulaTranslate = formulaTranslate.replace('A2', `GOOGLETRANSLATE(A2;"${lenguages[i-1]}";"${lenguages[i]}")`)
    }

    B2.formula = formulaTranslate

    await sheet.saveUpdatedCells()

    console.log(B2.value)

    return B2.value

}

//Read text original from origen.txt
const readText = async () => {
    const NAME_FILE =  "origen.txt"
        try{
            const text = fs.readFileSync(NAME_FILE,{encoding:'utf8', flag:'r'})
           
            return text
        }catch(err){
            console.log(err)
        }
}
//Write text translated in target.txt
const writeText = async (text) => {
    fs.writeFileSync("target.txt", text)
    console.log("Text translated")
}

(async () => {
    const text = await readText()
    const textTranslated = await translate(text, ["es","en"])
    await writeText(textTranslated)
})()


