const { GoogleSpreadsheet } = require('google-spreadsheet')
require('dotenv').config()

// Initialize the sheet - doc ID is the long id in the sheets URL
const doc = new GoogleSpreadsheet(process.env.ID)


//Main function to translate,inputs => text to translate, array with lenguages and type (default txt) 
const translate = async (text, lenguages, type = 'txt') => {
    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: process.env.CLIENT_EMAIL,
        private_key: process.env.PRIVATE_KEY,
    })

    await doc.loadInfo() // loads document properties and worksheets

    if (type === 'txt') {
       
        const sheet = doc.sheetsByTitle["Translate text"] // or use doc.sheetsById[id] or doc.sheetsByTitle[title]

        await sheet.loadCells('A1:B2') // loads a range of cells

        const A2 = sheet.getCellByA1('A2') //  load our target cells

        const B2 = sheet.getCellByA1('B2')


        //Add original text in cell A2
        A2.value = text

        //Create formula in B3
        let formulaTranslate = `=GOOGLETRANSLATE(A2;"${lenguages[lenguages.length - 2]}";"${lenguages[lenguages.length - 1]}")`
        for (let i = lenguages.length - 2; i > 0; i--) {
            formulaTranslate = formulaTranslate.replace('A2', `GOOGLETRANSLATE(A2;"${lenguages[i - 1]}";"${lenguages[i]}")`)
        }

        B2.formula = formulaTranslate

        //Save and update cells
        await sheet.saveUpdatedCells()

        console.log(B2.value)

        return B2.value

    }else{ //For html

        const sheet = doc.sheetsByTitle["Translate html"] // or use doc.sheetsById[id] or doc.sheetsByTitle[title]

        await sheet.loadCells('A1:D2') // loads a range of cells

        //  load our target cells

        const A2 = sheet.getCellByA1('A2')

        const B2 = sheet.getCellByA1('B2')

        const C2 = sheet.getCellByA1('C2')

        const D2 = sheet.getCellByA1('D2')

         //Add original text in cell A2
         A2.value = text

        //Deleting script tags
        text = text.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/g,"")

        //Save html tags
        const tags = text.match(/<(.*?)>/g)
      
        //Step 1: Delete contain tags and sustite for "javascript\n" (cell B3)
        text = text.replace(/<(.*?)>/g, "<javascript>\n")

        B2.value = text

        //Step 2: create formula and translate (cell C3)
        let formulaTranslate

        formulaTranslate = `=GOOGLETRANSLATE(B2;"${lenguages[lenguages.length - 2]}";"${lenguages[lenguages.length - 1]}")`
        for (let i = lenguages.length - 2; i > 0; i--) {
            formulaTranslate = formulaTranslate.replace('B2', `GOOGLETRANSLATE(B2;"${lenguages[i - 1]}";"${lenguages[i]}")`)
        }

        C2.formula = formulaTranslate

         //Save and update cells
        await sheet.saveUpdatedCells()

        
        let textTranslated = C2.value

         textTranslated  = textTranslated.replace(/<javascript>[.]/gi,"<javascript>")
         const tagsJavascript = textTranslated.match(/<javascript>/gi)
         console.log(tags.length)
         console.log(tagsJavascript.length)


        //Add original tags and copy the final text in D3
        tags.forEach(tag => {
           textTranslated = textTranslated.replace(/<javascript>/i, tag)
        })

        D2.value = textTranslated

        await sheet.saveUpdatedCells()

        //console.log(textTranslated)

        return textTranslated
    }
}



module.exports = translate

